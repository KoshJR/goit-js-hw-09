{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAgCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAzCMO,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAkBC,GAChBA,EAAMC,iBACN,IAAMC,EAAmB,GACZ,IAAIC,SAASH,EAAMI,eAC3BC,SAAQ,SAACC,EAAOC,GACnBL,EAAiBK,EAAKC,QAAUF,EAAME,M,IAExC,IAAIC,EAASC,OAAOR,EAAiBO,QACjCE,EAAQD,OAAOR,EAAiBZ,OAChCsB,EAAOF,OAAOR,EAAiBU,MAEnC,GAAIH,EAAS,GAAKE,EAAQ,GAAKC,EAAO,EAEpC,YADAC,EAAA3B,GAAS4B,OAAOC,QAAQ,uCAI1B,IAAK,IAAIC,EAAW,EAAGA,GAAYP,EAAQO,IACzC5B,EAAc4B,EAAUL,GACrBM,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBuB,EAAA3B,GAAS4B,OAAOK,QAAQ,qBAAoCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAEnE+B,OAAM,SAAAH,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBuB,EAAA3B,GAAS4B,OAAOQ,QAAQ,oBAAmCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAErEqB,GAASC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  const onFormSubmitData = {};\n  const data = new FormData(event.currentTarget);\n  data.forEach((value, name) => {\n    onFormSubmitData[name.trim()] = value.trim();\n  });\n  let amount = Number(onFormSubmitData.amount);\n  let delay = Number(onFormSubmitData.delay);\n  let step = Number(onFormSubmitData.step);\n\n  if (amount < 0 || delay < 0 || step < 0) {\n    Notiflix.Notify.warning(\"Значення не можуть бути від'ємними.\");\n    return;\n  }\n\n  for (let position = 1; position <= amount; position++) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","onFormSubmitData","FormData","currentTarget","forEach","value","name","trim","amount","Number","delay1","step","$parcel$interopDefault","Notify","warning","position1","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.487fc3be.js.map"}